@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Sandbox

<root>
</root>

@code
{
    public Dictionary<SpeechBubble, TimeUntil> SpeechBubbles { get; set; } = new();
    public static SpeechUI Instance { get; private set; }

    protected override void OnStart()
    {
        Instance = this;
    }

    TimeUntil _nextBubble = 1f;

    protected override void OnFixedUpdate()
    {
        foreach ( var bubble in SpeechBubbles )
        {
            if ( bubble.Value )
            {
                SpeechBubbles.Remove(bubble.Key);
                bubble.Key.Delete();
            }
            else
            {
                bubble.Key.Update();
            }
        }
    }

    /// <summary>
    /// Add a speech bubble on the screen
    /// </summary>
    /// <param name="speaker"></param>
    /// <param name="text"></param>
    /// <param name="speed">Characters per second</param>
    /// <param name="lifeTime">How many seconds to stay after it's done</param>
    /// <param name="talker"></param>
    /// <param name="gender"></param>
    public static void AddSpeech(string speaker, string text, float speed = 30f, float lifeTime = 2f, GameObject talker = null, Gender gender = Gender.Undefined)
    {
        var bubble = Instance.Panel.AddChild<SpeechBubble>("SpeechBubble");
        bubble.Speaker = speaker;
        bubble.Text = text;
        bubble.Speed = speed;
        bubble.LifeTime = 0;
        bubble.Talker = talker;
        bubble.Pitch = gender switch
        {
            Gender.Male => Game.Random.Float(0.6f, 0.8f),
            Gender.Female => Game.Random.Float(1.2f, 1.4f),
            _ => Game.Random.Float(0.9f, 1.1f)
        };

        var timeToWrite = text.Count() / speed;
        var totalDuration = timeToWrite + lifeTime;

        Instance.SpeechBubbles.Add(bubble, totalDuration);
    }

    protected override int BuildHash() => System.HashCode.Combine( Time.Now );
}
